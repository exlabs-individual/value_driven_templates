{"version":3,"file":"static/webpack/static/development/pages/_app.js.1cc93db1069026ed3d25.hot-update.js","sources":["webpack:///./src/layout/layout.provider.tsx","webpack:///./src/ui/hamburger/hamburger.component.tsx","webpack:///./src/ui/hamburger/hamburger.styles.ts","webpack:///./src/ui/mobile-header/header.component.tsx","webpack:///./src/ui/mobile-header/header.styles.ts"],"sourcesContent":["import React from 'react';\nimport { Layout, BodyContainer } from './layout.styles';\nimport { useDeviceDetect } from '../hooks/use-device-detect/use-device-detect.hook';\nimport { Header as MobileHeader } from '../ui/mobile-header/header.component';\nimport { Menu } from '../ui/mobile-menu/menu.component';\nimport { ThemeProvider } from 'styled-components';\nimport { theme } from '../theme/theme.config';\nimport { useMobileMenuState } from '../hooks/use-mobile-menu/use-mobile-menu.hook';\nimport { Footer } from '../ui/footer/footer.component';\nimport { DesktopNavigation } from '../ui/desktop-navigation/desktop-navigation.component';\nimport { useStickyNav } from '../hooks/use-sticky-nav/use-sticky-nav.hook';\nimport { ResetStyles } from '../theme/reset-styles';\n\nexport const LayoutProvider = ({ children }: { children: React.ReactNode }) => {\n  const { isMobile } = useDeviceDetect();\n  const {\n    state: { isVisible },\n  } = useMobileMenuState();\n  const stickyRef = React.useRef(null);\n\n  const isStickyNav = useStickyNav({ stickyRef });\n\n  return (\n    <Layout>\n      <style jsx global>\n        {`\n          html,\n          body {\n            margin: 0;\n            padding: 0;\n            font-family: 'Montserrat', 'Open Sans', sans-serif;\n            background-color: #f9f9f9;\n            -webkit-overflow-scrolling: touch;\n          }\n        `}\n      </style>\n      <ResetStyles />\n      <ThemeProvider theme={theme}>\n        <React.Fragment>\n          <BodyContainer>\n            {isMobile ? (\n              <React.Fragment>\n                {isStickyNav && (\n                  <div style={{ width: '100%', height: '62px' }}></div>\n                )}\n                <MobileHeader isSticky={isVisible ? true : isStickyNav} />\n                <div ref={stickyRef}>\n                  {isVisible && <Menu />}\n                  <div>{children}</div>\n                </div>\n              </React.Fragment>\n            ) : (\n              <div>\n                {isStickyNav && (\n                  <div style={{ width: '100%', height: '72px' }}></div>\n                )}\n                <DesktopNavigation\n                  theme={isStickyNav ? 'primary' : 'secondary'}\n                  isSticky={isStickyNav}\n                />\n                <div ref={stickyRef}>{children}</div>\n              </div>\n            )}\n          </BodyContainer>\n          <Footer />\n        </React.Fragment>\n      </ThemeProvider>\n    </Layout>\n  );\n};\n","import React from 'react';\nimport { StyledBurger } from './hamburger.styles';\nimport { ThemeType } from '../../../types';\n\ninterface HambuergerProps {\n  isOpen: boolean;\n  onClick: () => void;\n  theme?: ThemeType;\n}\n\nexport const Hambuerger = ({\n  isOpen,\n  onClick,\n  theme = 'primary',\n}: HambuergerProps) => {\n  return (\n    <StyledBurger\n      name=\"menu-button\"\n      open={isOpen}\n      onClick={onClick}\n      themeType={theme}\n    >\n      <div />\n      <div />\n      <div />\n    </StyledBurger>\n  );\n};\n","import styled from 'styled-components';\nimport { ThemeType, ThemedProps } from '../../../types';\n\nexport const StyledBurger = styled.button.attrs(\n  ({\n    open = false,\n    themeType = 'primary',\n  }: {\n    open?: boolean;\n    themeType?: ThemeType;\n  }) => ({ open, themeType })\n)`\n  background-color: inherit;\n  border: none;\n  outline: none;\n  padding: 0;\n\n  width: 2rem;\n  height: 2rem;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  transform-origin: 1px;\n  cursor: pointer;\n\n  & > div {\n    width: 32px;\n    height: 4px;\n    background-color: ${({ theme, themeType }: ThemedProps) =>\n      themeType === 'primary' ? theme.color.white : theme.color.black};\n    border-radius: 10px;\n    transition: transform 0.3s ease, opacity 0.3s ease;\n    position: relative;\n    transform-origin: 1px;\n\n    &:first-child {\n      transform: ${({ open }) => (open ? 'rotate(45deg)' : 'rotate(0)')};\n    }\n\n    &:nth-child(2) {\n      opacity: ${({ open }) => (open ? '0' : '1')};\n      transform: ${({ open }) => (open ? 'translateX(20px)' : 'translateX(0)')};\n    }\n\n    &:nth-child(3) {\n      transform: ${({ open }) => (open ? 'rotate(-45deg)' : 'rotate(0)')};\n    }\n  }\n`;\n","import React from 'react';\nimport { HeaderContainer, MenuContainer } from './header.styles';\nimport { useMobileMenuState } from '../../hooks/use-mobile-menu/use-mobile-menu.hook';\nimport { toggleMenu } from '../../context/mobile-menu/mobile-menu.action-creators';\nimport { Logo } from '../logo/logo.component';\nimport { Hambuerger } from '../hamburger/hamburger.component';\n\ninterface HeaderProps {\n  isSticky?: boolean;\n}\n\nexport const Header = ({ isSticky = false }: HeaderProps) => {\n  const {\n    state: { isVisible: isMenuVisible },\n    dispatch,\n  } = useMobileMenuState();\n\n  const onMenuClick = () => dispatch(toggleMenu());\n\n  return (\n    <HeaderContainer isSticky={isSticky}>\n      <Logo theme={isSticky ? 'primary' : 'secondary'} />\n      <MenuContainer>\n        <Hambuerger\n          isOpen={isMenuVisible}\n          onClick={onMenuClick}\n          theme={isSticky ? 'primary' : 'secondary'}\n        />\n      </MenuContainer>\n    </HeaderContainer>\n  );\n};\n","import styled from 'styled-components';\nimport { ThemeProps } from '../../theme/theme.config';\n\nexport const HeaderContainer = styled.div.attrs(\n  ({ isSticky = false }: { isSticky?: boolean }) => ({ isSticky })\n)`\n  background-color: ${({\n    theme,\n    isSticky,\n  }: ThemeProps & { isSticky?: boolean }) =>\n    isSticky ? theme.color.primary : 'inherit'};\n  width: calc(100% - 40px);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  color: #000;\n  animation: none;\n\n  ${(props) =>\n    props.isSticky &&\n    `\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: calc(100% - 40px);\n      z-index: 999;\n  `}\n`;\n\nexport const MenuContainer = styled.div`\n  & > .menu-btn {\n    background-color: inherit;\n    border: 0;\n    outline: none;\n  }\n`;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AADA;AAGA;AAEA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAarEA;AACA;AASA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;;;;;;;;;AC3BA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AAFA;AAMA;AAAA;AAAA;AAPA;AAAA;AAAA;AAyBA;AAAA;AAAA;AAQA;AAAA;AAIA;AAAA;AACA;AAAA;AAIA;AAAA;;;;;;;;;;;;;;;;;;;;;;;AC7CA;AACA;AACA;AACA;AACA;AACA;AAMA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;;;;;;;;;;;;AC/BA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAIA;AACA;AAFA;AAwBA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}